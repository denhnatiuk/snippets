".source.js":
  "React: import empty()":
    prefix: "_i"
    body: "import ${1} from '${2}';"

  "React: import()":
    prefix: "_ir"
    body: "import React from 'react';"

  "React: import() with PureComponent":
    prefix: "_irc"
    body: "import React, { PureComponent } from 'react';"

  "React: import() with PropTypes":
    prefix: "_irp"
    body: "import PropTypes from 'prop-types';"

  "React: import react-dom()":
    prefix: "_ird"
    body: "import ReactDOM from 'react-dom';"

  "React: import Autobind":
    prefix: "_iautobind"
    body: "import autobind from 'autobind-decorator';"

  "React: import Moment":
    prefix: "_imoment"
    body: "import moment from 'moment';"

  "React: import shallowEqual":
    prefix: "_ishallowequal"
    body: "import shallowEqual from 'shallowequal';"

  "React: import classNames":
    prefix: "_iclassnames"
    body: "import shallowEqual from 'shallowequal';"

  "React: import Util":
    prefix: "_iutil"
    body: "import ${1} from 'Utils/${1}.jsx';"

  "React: import Mock":
    prefix: "_imock"
    body: "import ${1} from 'Mocks/${1}.js';"

  "React: import Svg":
    prefix: "_isvg"
    body: "import ${1}IconSVG from 'Svg/${1}IconSVG.jsx';"

  "React: import Config":
    prefix: "_iconfig"
    body: "import config from 'Config';"

  "React: import LANGUAGE":
    prefix: "_ilang"
    body: "import {${1} as LANGUAGE} from 'Languages';"

  "React: import Scroll":
    prefix: "_iscroll"
    body: "import { Scrollbars } from 'Modules/react-custom-scrollbars';"

  "React: export empty()":
    prefix: "_ex"
    body: "export ${1};"

  "React: export default empty()":
    prefix: "_exd"
    body: "export default ${1};"

  "React: componentDidMount() { ... }":
    prefix: "_cdm"
    body: "componentDidMount() {\n\t${1}\n}${2}"

  "React: componentDidUpdate(pp, ps) { ... }":
    prefix: "_cdup"
    body: "componentDidUpdate(prevProps: Object, prevState: Object) {\n\t${1}\n}${2}"

  "React: componentDidCatch(pp, ps) { ... }":
    prefix: "_cdc"
    body: "componentDidCatch(error, info) {\n\t${1}\n}${2}"

  "React: componentWillMount() { ... }":
    prefix: "_cwm"
    body: "componentWillMount() {\n\t${1}\n}${2}"

  "React: componentWillReceiveProps(np) { ... }":
    prefix: "_cwr"
    body: "componentWillReceiveProps(nextProps: Object) {\n\t${1}\n}${2}"

  "React: componentWillUnmount() { ... }":
    prefix: "_cwun"
    body: "componentWillUnmount() {\n\t${1}\n}${2}"

  "React: componentWillUpdate(np: Object, ns: Object) { ... }":
    prefix: "_cwu"
    body: "componentWillUpdate(nextProps: Object, nextState: Object) {\n\t${1}\n}${2}"

  "React: Class.propTypes = { ... }":
    prefix: "_cpt"
    body: "${1}.propTypes = {\n\t${2}: PropTypes.${3:string}\n};"

  "React: propTypes { ... }":
    prefix: "_pt"
    body: "propTypes: {\n\t${1}: PropTypes.${2:string}\n},"

  "React: class skeleton":
    prefix: "_cer"
    body: "/* @flow */\n\nimport React, { PureComponent } from 'react';\n\nclass ${1} extends PureComponent {\n\trender(): React$Element<*> {\n\t\treturn (\n\t\t\t${2:<div></div>}\n\t\t);\n\t}\n}\n\nexport default ${1};"

  "React: class skeleton with propTypes":
    prefix: "_cerp"
    body: "/* @flow */\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ${1} extends PureComponent {\n\trender(): React$Element<*> {\n\t\treturn (\n\t\t\t${2:<div></div>}\n\t\t);\n\t}\n}\n\n${1}.propTypes = {};\n\nexport default ${1};"

  "React: Stateless Component":
    prefix: "_rsc"
    body: "/* @flow */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\ntype ${1}Type = {}\n\nconst ${1}: ${1} = ({${2}}: ${1}Type) => (\n\t<div>${4}</div>\n);\n\n${1}.propTypes = {};\n\nexport default ${1};"

  "React: Stateless Component Return":
    prefix: "_rscr"
    body: "/* @flow */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ${1}: ${1} = ({${2}}) => {\n\treturn (\n\t\t<div>${4}</div>\n\t);\n}\n\n${1}.propTypes = {};\n\nexport default ${1};"

  "React: Stateless Component Click":
    prefix: "_rscc"
    body: "/* @flow */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ${1}: ${1} = ({${2}}) => {\n\tconst handleClick = () => {};\n\treturn (\n\t\t<div onClick={handleClick}>${4}</div>\n\t);\n}\n\n${1}.propTypes = {};\n\nexport default ${1};"

  "React: Stateless Component PropTypes":
    prefix: "_rscp"
    body: "/* @flow */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\ntype ${1}Type = {}\n\nconst ${1}: ${1} = ({${2}}: ${1}Type) => (\n\t<div>${4}</div>\n);\n\n${1}.propTypes = {};\n\nexport default ${1};"

  "React: Stateless Function":
    prefix: "_rsf"
    body: "const ${1}: ${1} = ({${2}}) => (\n\t<div>{${2}}</div>\n);"

  "React: Component displayName":
    prefix: "_cdn"
    body: "${1}.displayName = '${1}';"

  "React: render() { return ... }":
    prefix: "_ren"
    body: "render() {\n\treturn (\n\t\t${1:<div></div>}\n\t);\n}"

  "React: setState({ ... })":
    prefix: "_sst"
    body: "this.setState({\n\t${1}: ${2}\n});"

  "React: shouldComponentUpdate(np, ns) { ... }":
    prefix: "_scu"
    body: "shouldComponentUpdate(nextProps: Object, nextState: Object): boolean {\n\t${1}\n}${2}"

  "React: this.props.":
    prefix: "_props"
    body: "this.props.${1}"

  "React: this.state.":
    prefix: "_state"
    body: "this.state.${1}"

  "React: constructor(props)":
    prefix: "_cns"
    body: "state: {};\nconstructor(props: Object) {\n\tsuper(props);\n\t${1:this.state = ${2};}\n}"

  # PropType string
  'React: PropType string':
    'prefix': '_rpstr',
    'body': "${1:myProp}: PropTypes.string,"
  'React: PropType string required':
    'prefix': '_rpstrr',
    'body': "${1:myProp}: PropTypes.string.isRequired,"

  # PropType number
  'React: PropType number':
    'prefix': '_rpn',
    'body': "${1:myProp}: PropTypes.number,"
  'React: PropType number required':
    'prefix': 'rpnr',
    'body': "${1:myProp}: PropTypes.number.isRequired,"

  # PropType object
  'React: PropType object':
    'prefix': '_rpo',
    'body': "${1:myProp}: PropTypes.object,"
  'React: PropType object required':
    'prefix': '_rpor',
    'body': "${1:myProp}: PropTypes.object.isRequired,"

  # PropType array
  'React: PropType array':
    'prefix': '_rpa',
    'body': "${1:myProp}: PropTypes.array,"
  'React: PropType array required':
    'prefix': '_rpar',
    'body': "${1:myProp}: PropTypes.array.isRequired,"

  # PropType bool
  'React: PropType bool':
    'prefix': '_rpb',
    'body': "${1:myProp}: PropTypes.bool,"
  'React: PropType bool required':
    'prefix': '_rpbr',
    'body': "${1:myProp}: PropTypes.bool.isRequired,"

  # PropType element
  'React: PropType element':
    'prefix': '_rpe',
    'body': "${1:myProp}: PropTypes.element,"
  'React: PropType element required':
    'prefix': '_rper',
    'body': "${1:myProp}: PropTypes.element.isRequired,"

  # PropType function
  'React: PropType function':
    'prefix': '_rpf',
    'body': "${1:myProp}: PropTypes.func,"
  'React: PropType function required':
    'prefix': '_rpfr',
    'body': "${1:myProp}: PropTypes.func.isRequired,"

  # PropType shape
  'React: PropType shape':
    'prefix': '_rps',
    'body': """
      ${1:myProp}: PropTypes.shape({
        ${2}
      }),
    """
  'React: PropType shape required':
    'prefix': '_rpsr',
    'body': """
      ${1:myProp}: PropTypes.shape({
        ${2}
      }).isRequired,
    """

  'React: PropType oneOf':
    'prefix': '_rpoo',
    'body': """
        PropTypes.oneOf([
          ${1},
        ]),
    """

  'React: PropType oneOfType':
    'prefix': '_rpoot',
    'body': """
        PropTypes.oneOfType([
          ${1:PropTypes.},
        ]),
    """
